" ============================================================================================================
" Default colorschem 
"color codeschool
"color kellys
"
" ============================================================================================================
" Solarized Colorscheme Config
let g:solarized_contrast="high"    "default value is normal
let g:solarized_hitrail=1    "default value is 0
syntax enable
set background=dark
colorscheme solarized
"

" ============================================================================================================
" Set MacVim gui font
"set guifont=Meslo\ LG\ L\ DZ:h10
set guifont=Meslo\ LG\ L\ DZ\ for\ Powerline:h12

" ============================================================================================================
" Disable vi-compatibility
set nocompatible

" ============================================================================================================
" Always show the statusline
set laststatus=2

" ============================================================================================================
" Necessary to show Unicode glyphs
set encoding=utf-8 

" ============================================================================================================
" Require for vim-powerline
"call Pl#Theme#InsertSegment('ws_marker', 'after', 'lineinfo')
"let g:Powerline_symbols = 'fancy'

" ============================================================================================================
" Disable the macvim toolbar
set guioptions-=T

" ============================================================================================================
" map jj for easy ESC
inoremap jj <ESC>

" ============================================================================================================
set hidden

" ============================================================================================================
" Paste Toggle
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" ============================================================================================================
" show invisible characters like textmate
set listchars=tab:▸\ ,eol:¬

" ============================================================================================================
" Disable backup
set nobackup
set nowritebackup
set noswapfile

" ============================================================================================================
" Things to ignore
set wildignore=*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem

" ============================================================================================================
" Toggle Invisibles
nmap <silent> <leader>si :setlocal list!<cr>

" ============================================================================================================
" Ack for the last search.
nnoremap <silent> <leader>? :execute "Ack! '" . substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""), "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>

" ============================================================================================================
set showcmd
" Show (partial) command in the status line

" ============================================================================================================
" add  syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" ============================================================================================================
" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" ============================================================================================================
" Alphabetical Sort of CSS Properties
"map <leader>c ?{<CR>jV/^\s*\}\=$<CR>k:sort<CR>:let @/=''<CR>
"Use CSSComb
map <leader>c :CSSComb<CR>

" ============================================================================================================
" Window Naviagion
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ============================================================================================================
" Bufferator Options
" Fix for Bufferator messing with window layout
let g:buffergator_autoexpand_on_split = 0
" Change Bufferator to open in horizontal split (default is vertical)
let g:buffergator_viewport_split_policy = "T"
" Chnage Bufferator split size (default 40)
let g:buffergator_split_size = 15

" ============================================================================================================
" Enalbe OSX clipboard
set clipboard=unnamed

" ============================================================================================================
" Set tab stops for HTML files
autocmd FileType html setlocal shiftwidth=4 tabstop=4
autocmd FileType php setlocal shiftwidth=4 tabstop=4

" ============================================================================================================
" Set history 1000
:set history=1000

" ============================================================================================================
" Set + - to increase or decrease windows by sane amount
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

" ============================================================================================================
" JavaScript (tab width 2 chr, wrap at 79th)
autocmd FileType javascript set sw=2
autocmd FileType javascript set ts=2
autocmd FileType javascript set sts=2
autocmd FileType javascript set tw=79

" ============================================================================================================
" Run php linter
map <C-b> :w !php -l<CR>

" ============================================================================================================
" Run ruby script
map <D-r> :w !ruby <CR>

set shell=/bin/sh

" ============================================================================================================
" NerdTREE options
" Set nerdtree to automatically set root to active file's folder
let NERDTreeChDirMode=2
" Make nerdtree look nice
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

" ============================================================================================================
" Disable Bell in MacVim
set vb

" ============================================================================================================
" Disable Printing!
map <C-p> <ESC>

" ============================================================================================================
" Simple prettyify JSON
if !exists(":PrettyJSON")
  :command PrettyJSON %!python -m json.tool
endif

" ============================================================================================================
" Syntastic
nmap <leader>err :Errors<CR><C-W>j
noremap <leader>y :SyntasticCheck<cr>
" Check syntax on file open
let g:syntastic_check_on_open=1
" Put errors on left side
let g:syntastic_enable_signs=1
" Only errors, not warnings please
let g:syntastic_quiet_warnings=1
" Only show errors when I ask
let g:syntastic_auto_loc_list=2
"use jshint for javascript chekcing
let g:syntastic_javascript_checker="jshint"
let g:syntastic_javascript_jshint_conf="~/.jshintrc"

" Syntastic styles
if has('unix')
  let g:syntastic_error_symbol='★'
  let g:syntastic_style_error_symbol='>'
  let g:syntastic_warning_symbol='⚠'
  let g:syntastic_style_warning_symbol='>'
else
  let g:syntastic_error_symbol='!'
  let g:syntastic_style_error_symbol='>'
  let g:syntastic_warning_symbol='.'
  let g:syntastic_style_warning_symbol='>'
endif

" ============================================================================================================
" JSBeautify
let g:jsbeautify = {'indent_size': 2, 'indent_char': ' '}
let g:htmlbeautify = {'indent_size': 4, 'indent_char': ' ', 'max_char': 78, 'brace_style': 'expand', 'unformatted': ['a', 'sub', 'sup', 'b', 'i', 'u']}
let g:cssbeautify = {'indent_size': 2, 'indent_char': ' '}
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
" for css or scss
autocmd FileType less noremap <buffer> <c-f> :call CSSBeautify()<cr>

" ============================================================================================================
" Folding shortcut
map <leader>zf $zf%

" ============================================================================================================
" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
        \ &tabstop, &shiftwidth, &textwidth)
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" ============================================================================================================
" TagBar Options
let g:tagbar_autofocus=1
let g:tagbar_autoclose=1

" ============================================================================================================
" Lusty Juggler Options
let g:LustyJugglerSuppressRubyWarning = 1
let g:LustyJugglerAltTabMode = 1
let g:LustyJugglerShowKeys = 'a' " show a/s/d/f keys 

" ============================================================================================================
 "If you visually select something and hit paste
" that thing gets yanked into your buffer. This
" generally is annoying when you're copying one item
" and repeatedly pasting it. This changes the paste
" command in visual mode so that it doesn't overwrite
" whatever is in your paste buffer.
vnoremap p "_dP

" ======================================================
" vim-indent-guides options
let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" ======================================================
" Delete trailing whitespace on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
autocmd BufWrite *.js :call DeleteTrailingWS()

" ======================================================
" No syntax highlighting for any file that's larger than .5MB
if has('autocmd')
	autocmd BufReadPost * if getfsize(bufname("%")) > 512*1024 |
	\ set syntax= |
	\ endif
endif

" ======================================================
" Make writing rails eaiser"
" create <%= foo %> erb tags using Ctrl-k in edit mode
imap <silent> <C-K> <%=   %><Esc>3hi

" create <% foo %> erb tags using Ctrl-j in edit mode
imap <silent> <C-J> <%  %><Esc>2hi

" ======================================================
" Tell showmarks to not include the various brace marks (),{}, etc
let g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY"

" ======================================================
" ConqueTerm
let g:ConqueTerm_InsertOnEnter = 0

let g:ConqueTerm_CWInsert = 1
let g:ConqueTerm_Color = 2
let g:ConqueTerm_ReadUnfocused = 1 " update conqueterm buffer while we're not looking (for running tests)

" Open up a variety of commands in the ConqueTerm
nmap <silent> <Leader>cc :execute 'ConqueTermSplit script/console --irb=pry'<CR>
nmap <silent> <Leader>pp :execute 'ConqueTermSplit pry'<CR>

" Run the current file in a ConqueTerm, great for ruby tests
let g:ConqueTerm_InsertOnEnter = 0
let g:ConqueTerm_CWInsert = 1

" Send the current selection to conqueterm. This lets you easily veal
" Ruby code in an irb console. Note: you must have only one ConqueTerm
" console open and running irb for this to work. Somehow it gets confused
" when multiple consoles are open. If you know how to fix this let me know :)
let g:ConqueTerm_SendVisKey = '<Leader>e'

" prevent auto insert mode, which is helpful when using conque
" term for running tests
autocmd WinEnter * stopinsert

" Cmd-Shift-R for RSpec
nmap <silent> <D-R> :call RunRspecCurrentFileConque()<CR>
" Cmd-Shift-L for RSpec Current Line
nmap <silent> <D-L> :call RunRspecCurrentLineConque()<CR>
" ,Cmd-R for Last conque command
nmap <silent> ,<D-R> :call RunLastConqueCommand()<CR>

" ======================================================
" Jasmine Stuff
au BufRead,BufNewFile *_[Ss]pec.js set filetype=javascript-jasmine syntax=javascript
